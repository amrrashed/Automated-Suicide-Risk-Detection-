# -*- coding: utf-8 -*-
"""searchgrid and random search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ONzqHC3s8EX8LuNMitfEE3PQ-dzlRJO

[search grid and random search tutorial](https://towardsdatascience.com/grid-search-for-model-tuning-3319b259367e)

[grid search vs random search](https://https://medium.com/@senapati.dipak97/grid-search-vs-random-search-d34c92946318)

[tutorial](https://machinelearningmastery.com/hyperparameter-optimization-with-random-search-and-grid-search/)

[random search paper](https://https://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf)

[paper2](https://https://arxiv.org/abs/1912.06059)

[comparison between two techniques](https://scikit-learn.org/stable/auto_examples/model_selection/plot_randomized_search.html#sphx-glr-auto-examples-model-selection-plot-randomized-search-py)

[GA algorithm](https://towardsdatascience.com/genetic-algorithm-to-optimize-machine-learning-hyperparameters-72bd6e2596fc)
"""

import numpy as np
import pandas as pd #import pandas
from sklearn.preprocessing import LabelEncoder
from scipy.stats import loguniform
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import GridSearchCV

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/breast-cancer-wisconsin.data.txt')
df.replace('?',-99999, inplace=True)
df.drop(['id'], 1, inplace=True)
X = np.array(df.drop(['class'], 1))
X = X.astype('float32')
y = np.array(df['class'])
y = LabelEncoder().fit_transform(y.astype(str))
# Look at the dataset again
print(X.shape, y.shape)
print(df.head())

"""# RANDOM SEARCH"""

# define model
model = LogisticRegression()
# define evaluation
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# define search space
space = dict()
space['solver'] = ['newton-cg', 'lbfgs', 'liblinear']
space['penalty'] = ['none', 'l1', 'l2', 'elasticnet']
space['C'] = loguniform(1e-5, 100)
# define search
search = RandomizedSearchCV(model, space, n_iter=500, scoring='accuracy', n_jobs=-1, cv=cv, random_state=1)
# execute search
result = search.fit(X, y)
# summarize result
print('Best Score: %s' % result.best_score_)
print('Best Hyperparameters: %s' % result.best_params_)

"""# GRID SEARCH"""

# define model
model = LogisticRegression()
# define evaluation
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# define search space
space = dict()
space['solver'] = ['newton-cg', 'lbfgs', 'liblinear']
space['penalty'] = ['none', 'l1', 'l2', 'elasticnet']
space['C'] = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1, 10, 100]
# define search
search = GridSearchCV(model, space, scoring='accuracy', n_jobs=-1, cv=cv)
# execute search
result = search.fit(X, y)
# summarize result
print('Best Score: %s' % result.best_score_)
print('Best Hyperparameters: %s' % result.best_params_)